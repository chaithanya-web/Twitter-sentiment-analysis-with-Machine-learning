# -*- coding: utf-8 -*-
"""Twitter sentiment analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y4Ebpg9WeOQXJD_HgRF0kqh2XO3Ldr2h

Twitter sentiment Analysis using Machine learning NLP
"""

! pip install kaggle

from google.colab import files
files.upload()

"""Importing API key as the file is large"""

! mkdir ~/.kaggle

! cp kaggle.json ~/.kaggle/

! chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d kazanova/sentiment140

from zipfile import ZipFile
file_name = "/content/sentiment140.zip"
with ZipFile(file_name, 'r') as zip:
  zip.extractall()
  print('done')

#importing libraries
import pandas as pd
import numpy as np
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

import nltk
nltk.download('stopwords')

print(stopwords.words('english'))

#reading the dataset
twitter_data = pd.read_csv('/content/training.1600000.processed.noemoticon.csv', encoding='ISO-8859-1')

"""Data preprocessing"""

twitter_data.shape

#getting 5 columns
twitter_data.head()

#Giving names to columns
coloumn_names = ['target', 'id', 'date', 'flag', 'user', 'text']
twitter_data = pd.read_csv('/content/training.1600000.processed.noemoticon.csv', names = coloumn_names, encoding='ISO-8859-1')

twitter_data.shape

twitter_data.head()

#Finding and counting missing values
twitter_data.isnull().sum()

#chekking distrubution of labels
twitter_data['target'].value_counts()

#Replacing the target label "4" to "1"
twitter_data.replace({'target': {4:1}}, inplace=True)

#Again checking the distribution of target labels
twitter_data['target'].value_counts()

#Stemming
port_stem = PorterStemmer()

def stemmer(content):
  stemmed_content = re.sub('[^a-zA-Z]', ' ', content)
  stemmed_content = stemmed_content.lower()
  stemmed_content = stemmed_content.split()
  stemmed_content = [port_stem.stem(word) for word in stemmed_content if not word in stopwords.words('english')]
  stemmed_content = ' '.join(stemmed_content)
  return stemmed_content

#Creating new column content
twitter_data['content'] = twitter_data['text'].apply(stemmer)

twitter_data.head()

print(twitter_data['content'])

#storing the target and stemmed content in x and y variables
x = twitter_data['content'].values
y = twitter_data['target'].values

print(x)

print(y)

"""Model Training"""

X_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=0.2, stratify=y, random_state=2)

print(x.shape, X_train.shape, X_test.shape)

print(X_train)

print(X_test)

#Feature extraction
vectorizer = TfidfVectorizer()
X_train = vectorizer.fit_transform(X_train)
X_test = vectorizer.transform(X_test)

print(X_train)

print(X_test)

#Training the ML model
#Logistic Regression
model = LogisticRegression(max_iter=1000)

model.fit(X_train, Y_train)

"""Model Evaluation

"""

#Accuracy on training data
X_train_prediction = model.predict(X_train)
train_data_accuracy = accuracy_score(Y_train, X_train_prediction)

print('Accuracy on training data : ', train_data_accuracy)

X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(Y_test, X_test_prediction)

print('Accuracy on test data : ', test_data_accuracy)

"""Model Accuracy

"""

import pickle

file_name = 'trained_model.sav'
pickle.dump(model, open(file_name, 'wb'))

loaded_model = pickle.load(open('/content/trained_model.sav', 'rb'))

X_new = X_test[200]
print(Y_test[200])

prediction = loaded_model.predict(X_new)
print(prediction)

if (prediction[0]==0):
  print('Negative')

else:
  print('Positive')

X_new = X_test[3]
print(Y_test[3])

prediction = loaded_model.predict(X_new)
print(prediction)

if (prediction[0]==0):
  print('Negative')

else:
  print('Positive')